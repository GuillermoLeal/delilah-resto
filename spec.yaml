openapi: 3.0.0
servers: 
- url: http://localhost:3000/api
  description: ServidorLocal
info: 
  title: Delilah Restó
  description: API para pedidos de comida deliciosa. Como cliente, podrás registrarte, ver el listado de nuestros productos
    y realizar una orden. Los administradores del restaurante tienen la oportunidad de recibir pedidos y actualizarlos.
  version: 1.0.0
components:
  securitySchemes:
    bearerAuth:            # arbitrary name for the security scheme
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    product:
      type: object
      properties:
        id:
          type: integer
          format: int64
        image:
          type: string
        name:
          type: string
        price:
          type: integer
          format: float
    state:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
    payment:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
    user:
      type: object
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
        password:
          type: string
          format: password
        fullname:
          type: string
        email:
          type: string
          format: email
        phone:
          type: string
        address:
          type: string
        role:
          $ref: '#/components/schemas/role'
        balance:
          type: integer
    role:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
    order:
      type: object
      properties:
        id:
          type: integer
          format: int64
        state:
          $ref: '#/components/schemas/state'
        date:
          type: string
          format: date-time
        description:
          type: string
        payment:
          $ref: '#/components/schemas/payment'
        user:
          type: object
          properties:
            id:
              type: integer
              format: int64
            username:
              type: string
            fullname:
              type: string
            email:
              type: string
            phone:
              type: string
            address:
              type: string
        products:
          type: array
          items:
            type: object
            properties:
              producto:
                $ref: '#/components/schemas/product'
              amount:
                type: integer
  responses:
    UnauthorizedError:
      description: Token invalido. Debe proverse con el formato Bearer <token>
tags:
- name: "product"
  description: "productos que se pueden comprar"
- name: "user"
  description: "informacion del usuario"
- name: "order"
  description: "ordenes solicitadas por los clientes"
paths:
  /product:
    get:
      security:
        - bearerAuth: []
      tags:
      - "product"
      summary: Retorna una lista de todos los productos.
      responses:
        '200': # status code
          description: Un array de objetos producto
          content:
            application/json:
              schema: 
                type: array
                items: 
                  $ref: '#/components/schemas/product'
    post:
      security:
        - bearerAuth: []
      tags:
      - "product"
      summary: Crear nuevo producto.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                nombre:
                  type: string
                precio:
                  type: integer
                  format: float
      responses:
        '200': # status code
          description: Producto guardado correctamente
    put:
      security:
        - bearerAuth: []
      tags:
      - "product"
      summary: "Actualizar un producto"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/product'
      responses:
        '200': # status code
          description: Producto actualizado correctamente
    delete:
      security:
        - bearerAuth: []
      tags:
      - "product"
      summary: "Eliminar un producto"
      parameters:
        - in: query
          name: prodId
          description: "ID del producto a eliminar"
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200': # status code
          description: Producto eliminado correctamente
  /product/{prodId}:
    get:
      security:
        - bearerAuth: []
      tags:
      - "product"
      summary: Busca un producto por ID.
      parameters:
        - in: path
          name: prodId
          description: "ID del producto a buscar"
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200': # status code
          description: producto encontrado
          content:
            application/json:
              schema: 
                properties:
                  product:
                    $ref: '#/components/schemas/product'
  /auth/register:
    post:
      tags:
      - "user"
      summary: Crear un usuario
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
                fullname:
                  type: string
                email:
                  type: string
                phone:
                  type: string
                address:
                  type: string
      responses:
        "200":
          description: usuario registrado correctamente
  /auth/login:
    post:
      tags:
      - "user"
      summary: Registra al usuario en el sistema.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
      responses:
        "200":
          description: Usuario logueado correctamente
          content:
            application/json:
              schema:
                type: object
                properties:
                  usuario:
                    type: object
                    properties:
                      id:
                        type: integer
                        format: int64
                      username:
                        type: string
                      fullname:
                        type: string
                      email:
                        type: string
                      phone:
                        type: string
                      address:
                        type: string
                      roleId:
                        type: integer
                        format: int64
                  token:
                    type: string
  /user/{email}:
    get:
      security:
        - bearerAuth: []
      tags:
      - "user"
      summary: Obtener usuario por email
      parameters:
      - in: path
        name: email
        description: nombre del usuario que desea buscar
        required: true
        schema:
            type: string
      responses:
        "200":
          description: usuario encontrado
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    type: object
                    properties:
                      id:
                        type: integer
                        format: int64
                      username:
                        type: string
                      fullname:
                        type: string
                      email:
                        type: string
                      phone:
                        type: string
                      address:
                        type: string
                      roleId:
                        type: integer
                        format: int64
  /order:
    get:
      security:
        - bearerAuth: []
      tags:
      - "order"
      summary: Retorna una lista de todas las ordenes.
      parameters:
        - in: query
          name: offset
          schema:
            type: integer
          description: La cantidad de elementos que se deben omitir antes de comenzar a recopilar el conjunto de resultados.
        - in: query
          name: limit
          schema:
            type: integer
          description: El numero de elementos a retornar
      responses:
        '200': # status code
          description: Un array de objetos order
          content:
            application/json:
              schema: 
                type: array
                items:
                  properties:
                    id:
                      type: integer
                      format: int64
                    description:
                      type: string
                    date:
                      type: string
                    stateId:
                      type: integer
                      format: int64
                    state:
                      type: string
                    userId:
                      type: integer
                      format: int64
                    user:
                      type: string
                    address:
                      type: string
                    paymentId:
                      type: integer
                      format: int64
                    payment:
                      type: string
    post:
      security:
        - bearerAuth: []
      tags:
      - "order"
      summary: Crear nueva orden.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                payment:
                  type: integer
                  format: int64
                user:
                  type: integer
                  format: int64
                products:
                  type: array
                  items:
                    type: object
                    properties:
                      id: 
                        type: integer
                        format: int64
                      amount: 
                        type: integer
                        format: int64
      responses:
        '200': # status code
          description: Producto guardado correctamente
    put:
      security:
        - bearerAuth: []
      tags:
      - "order"
      summary: "Actualizar estado de una orden"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: integer
                  format: int64
                state:
                  type: integer
                  format: int64
      responses:
        '200': # status code
          description: Orden actualizada correctamente
  /order/{orderId}:
    get:
      security:
        - bearerAuth: []
      tags:
      - "order"
      summary: Busca una orden por ID.
      parameters:
        - in: path
          name: orderId
          description: "ID de la orden a buscar"
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200': # status code
          description: producto encontrado
          content:
            application/json:
              schema: 
                properties:
                  id:
                    type: integer
                    format: int64
                  description:
                    type: string
                  date:
                    type: string
                  stateId:
                    type: integer
                    format: int64
                  state:
                    type: string
                  userId:
                    type: integer
                    format: int64
                  user:
                    type: string
                  address:
                    type: string
                  paymentId:
                    type: integer
                    format: int64
                  payment:
                    type: string
                  products:
                    type: array
                    items:
                      properties:
                        id:
                          type: integer
                          format: int64
                        name:
                          type: string
                        images:
                          type: string
                        price:
                          type: integer
                          format: int64
                        amount:
                          type: integer
                          format: int64
  
















































